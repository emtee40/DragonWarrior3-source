ЧТО МОЖНО ИЗМЕНИТЬ

1. Изменить логику управления на более современную. Меню должно использоваться только для настроек, просмотра и надевания шмоток и статусов. Действия на карте должны происходить автоматически. В идеале с автоопределением точки проверки (кнопка А в пустом месте или на сундуке начинает поиск под ногами, перед персонажем или магазином начинает разговор, перед дверью открывает ее, если есть соответствующий предмет в инвентаре) либо вручную (А - разговор, В - поиск без проверки положения).
2. Когда применяешь предмет в инвентаре, обычно он применяется на того, кто предмет держит, автоматом. Но лечащие травки можно применять на любом персонаже из меню выбора. Почему бы не сделать это для других предметов, например семян параметров?
3. Состояние сундуков в игре запоминается глобально, нельзя открыть один сундук два раза. Двери же каждый раз приходится открывать заново. Можно аналогично сундукам сделать и открывание дверей навсегда, чтобы не лазить каждый раз снова в карман за ключом.
4. Использовать улучшения четвертой части.
4.1 Сохранение и информация о следующем уровне дается в любом уровне в церкви, а не только у королей в замках
4.2 Продавать предметы можно одинаково в любом магазине
4.3 Изменение параметров с надетыми предметами видно сразу при выборе, без необходимости экипировки
4.4 Расширенное меню во время боя, позволяющее иметь главному герою дополнительные команды
5. Выбор персонажей из списка таверны в любое время во время игры
6. Отдых на карте мира в тентах, как в некоторых других играх
7. Больше сундуков для денег и предметов, во всех городах, а не только в одном единственном месте.

ЧТО СДЕЛАТЬ

1. Файловая система
1.1 Возможно использование отдельной таблицы и соответственно упрощенных функций выборки для данных, читаемых из внешних банков через файловую систему.
1.2 Все системные функции подразумевают передачу только 8-битного аргумента, старшие биты при этом устанавливаются исходя из номера самой вызываемой функции. Но, после упрощения дешифрации BRK опкодов, имеется возможность иметь как минимум 3 лишних бита для использования в качества старших битов аргумента.

2. Функции быстрого доступа к файловой системе через SRAM
2.2 В идеале убрать функции быстрого доступа из SRAM и использовать для этого простые BNE переходы в системном банке.

3. Система выборки и вывода сообщений.
3.1 Используются системные функции двух типов. Одни напрямую вызываются из банка D, куда и возвращаются для выбора индекса сообщений по отдельной таблице. Другие используют системные функции, определяющими старшую часть индекса сообщения и аргументом, задающим младшую. В результате получается довольно странная каша из разного рода индексов, вместо указания одного конкретного индекса конкретного сообщения. До кучи сами функции вывода сообщений довольно разветвлены и вложены друг в друга в разной степени.
3.2 Вывод сообщения подразумевает наличие открытого окна, следовательно, перед каждым сообщением вызывается код открытия ресурса окна, где-то это выведено в оберточные функции, где-то нет, но почти каждый диалог в этом случае должен начинаться с открытия окна. Во многих случаях окно имеет стандартный вид и для таких функций можно было бы сделать специальную функцию, выводящую сообщение сразу в созданное  окно. В оригинальном коде есть большая чехарда с этим делом. В некоторых местах используются макро-функции, которые сразу делают окно и выводят сообщение, в других местах опкоды идут пачками как есть. Причесать единообразно, где только можно (два опкода БРК весят 6 байт, опкод вызова макрофункции и загрузка индекса в регистр - 5).

4. Проверить, можно ли скриптами генерить индексы через EQU, раз оно не может делать метки глобальными

ЧТО СДЕЛАНО

1. Общая очистка кода и неиспользуемых данных, как обычно.
2. Музыкальный банк перемещен в нижний блок памяти, убраны дальние вложенные вызовы звуковых библиотек через костыли. Теперь вызовы делаются напрямую через файловую систему.
3. Данные, содержащие только одиночные 16-битные указатели (для загрузки раздельно младшей и старшей части), преобразованы в непосредственную загрузку младшей и старшей частей указателя в регистры.

4. Файловая система
4.1 Исключено использование файловой системы для хранения и вычитки указателей на блоки данных во внешних банках. Так как все адреса видны глобально на этапе ассемблирования, все подобные использования указателей заменены прямым заданием адреса в регистрах. Все соответствующие функции, ставшие ненужными, выпилены.
4.2 Проиндексированы таблицы указателей на функциях во внешних банках и общая таблица файлов. Таблицы указателей очищены от пустых, неиспользуемых функций и указателей, а также от дубликатов указателей.
4.3 BRK опкоды заменены на макросы с автоматическим расчетом индекса функции в файловой системе. Константы индексов файловой системы, использующиеся в функциях для непрямого вызова или чтения внешних процедур и данных заменены на мнемонические. Возможен произвольный перенос и оптимизация индексов файловой системы.
4.4 Таблица номеров банков функций расширена с 4-битных индексов на 8-битные, огриничения на вызов внешних банков старшего 256К блока отсутствуют.
4.5 В общую таблицу вызовов добавлены функции старшего 256К блока, BRK опкоды с командой непосредственного перехода для старших банков больше не используются.
4.6 Убрано разделение на дальние и библиотечные вызовы из обработчика BRK переходов, теперь они все одинаково вызывают только системные функции, каждая из которых имеет свой формат аргумента и предназначение. Упрощена выборка номер индекса функции.
4.7 Совмещены таблицы номров банков и индексы функций в одной записи в файловой системе для возможности произвольной автоматической сортировки и чистки.
4.8 Файлы с данными перемещены в начало таблицы файловой системы, чтобы гарантировать нахождение их индексов в первых 256 элементах, так как все текущие функции чтения данных рассчитаны только на 8-битные индексы.
4.9 Финальная оптимизация и очистка индексов файловой системы.

5. Функции быстрого доступа к файловой системе через SRAM
5.1 Переделан формат ссылок быстрого доступа без использования параметрических чтений индекса. Соответствующие функции, ставшие ненужными, удалены.
5.2 Отдельная быстрая ссылка для доступа к функциям файловой систем по заданному в регистре индексу _sys_safe_select перенесена из SRAM в системный банк и упрощена (из двух дополнительных индексов 166 и 167, первый никогда не использовался в этой процедуре).
5.3 Фунция для ускоренного доступа _sys_safe_select теперь всегда работает с файлами из младшей части таблицы файлов, убрана лишняя проверка на дополнительную функцию.

6. Система выборки и вывода сообщений.
6.1 Частично упорядочены BRK опкоды для вывода сообщений. Весь диапазон сообщений может быть выведен фиксированными MSGX функциями с указанием полного индекса сообщения. Сообщения могут быть как возвратные, так и невозвратные (break). Все функции, которые имеют фиксированные индексы, сконвертированы в макрос MSGX.

НОВЫЕ БАГИ
